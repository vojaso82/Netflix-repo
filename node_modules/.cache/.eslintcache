[{"C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\index.js":"1","C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\App.js":"2","C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\reportWebVitals.js":"3","C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\components\\Repositories.js":"4","C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\api\\index.js":"5","C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\utils\\index.js":"6","C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\components\\Commits.js":"7"},{"size":535,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":483,"mtime":1675876258431,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3607,"mtime":1675892880958,"results":"12","hashOfConfig":"9"},{"size":595,"mtime":1675889552859,"results":"13","hashOfConfig":"9"},{"size":337,"mtime":1675889600905,"results":"14","hashOfConfig":"9"},{"size":2305,"mtime":1675896991125,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"xa7ipn",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\index.js",[],[],[],"C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\App.js",[],[],"C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\reportWebVitals.js",[],[],"C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\components\\Repositories.js",["39"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport getNetflixData from \"../api\";\r\nimport { isNil, isNotNil } from \"../utils\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nfunction Repositories() {\r\n  const [repos, setRepos] = useState([]);\r\n  const [originalRepos, setOriginalRepos] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const getNetflixDataResponse = async () => {\r\n    try {\r\n      const netflixData = await getNetflixData();\r\n      if (isNil(netflixData)) {\r\n        return toast(\"Error getting netflix list\", {\r\n          type: toast.TYPE.ERROR,\r\n        });\r\n      } else {\r\n        setRepos(netflixData);\r\n        setOriginalRepos(netflixData);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      toast(err.message || err.msg || err.toString() || \"Error getting data\", {\r\n        type: toast.TYPE.ERROR,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n    if (isNil(e.target.value)) {\r\n      setRepos(originalRepos);\r\n    }\r\n    const filteredList = repos.filter((item) =>\r\n      item.name.toLowerCase().includes(e.target.value.toLowerCase())\r\n    );\r\n    setRepos(filteredList);\r\n  };\r\n\r\n  //Return back old state when deleting input values on change on inputValues and originalRepos\r\n  useEffect(() => {\r\n    if (isNil(inputValue)) {\r\n      setRepos(originalRepos);\r\n    }\r\n  }, [inputValue, originalRepos]);\r\n\r\n  //Render api data on page load\r\n  useEffect(() => {\r\n    getNetflixDataResponse();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div style={styles.mainDiv}>\r\n        <img\r\n          src=\"https://avatars.githubusercontent.com/u/913567?v=4\"\r\n          alt=\"Netflix image\"\r\n          width=\"100\"\r\n          height=\"80\"\r\n        />\r\n        <h1 style={{ color: \"red\" }}>Netflix Github Repositories:</h1>\r\n      </div>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <p>Search repos: </p>\r\n        <input\r\n          style={{ borderRadius: 5 }}\r\n          type=\"text\"\r\n          value={inputValue}\r\n          placeholder=\"Type here to search\"\r\n          onChange={(e) => handleInputChange(e)}\r\n        />\r\n      </div>\r\n      <div>\r\n        {isNotNil(repos) ? (\r\n          repos\r\n            .sort((itemA, itemB) => itemB.forks_count - itemA.forks_count)\r\n            .map((item) => (\r\n              <div style={styles.container}>\r\n                <Link style={styles.links} to={`/commits/${item.id}`}>\r\n                  <li key={item.id}>Repo name: {item.name} </li>\r\n                </Link>\r\n                <p>Language: {item.language}</p>\r\n                <p>Description: {item.description}</p>\r\n                <p>Star Count: {item.stargazers_count}</p>\r\n                <p>Fork Count: {item.forks_count}</p>\r\n                <p>\r\n                  Date Created: {moment(item?.created_at).format(\"MM/DD/YYYY\")}\r\n                </p>\r\n              </div>\r\n            ))\r\n        ) : isNil(originalRepos.length) ? (\r\n          <h2>Loading</h2>\r\n        ) : (\r\n          <h2>No matches found</h2>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  links: {\r\n    textDecoration: \"none\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  mainDiv: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"black\",\r\n    paddingLeft: \"20px\",\r\n  },\r\n  container: {\r\n    width: \"60\",\r\n    border: \"1px solid rgba(0, 0, 0, 0.12)\",\r\n    borderRadius: \"16px\",\r\n    padding: \"15px\",\r\n    backgroundColor: \"#008BC0\",\r\n  },\r\n};\r\n\r\nexport default Repositories;\r\n","C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\api\\index.js",[],[],"C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\utils\\index.js",[],[],"C:\\Users\\vojis\\OneDrive\\Desktop\\Project\\netflix\\src\\components\\Commits.js",[],[],{"ruleId":"40","severity":1,"message":"41","line":58,"column":9,"nodeType":"42","endLine":63,"endColumn":11},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]